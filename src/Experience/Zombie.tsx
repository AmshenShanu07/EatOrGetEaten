/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 ./public/models/zombie.glb --types -k 
*/

import * as THREE from "three";
import { useLayoutEffect, useMemo, useRef } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import useGameStore from '../Hooks/useGameStore';

type GLTFResult = GLTF & {
  nodes: {
    characterMedium001: THREE.SkinnedMesh;
    LeftFootCtrl: THREE.Bone;
    RightFootCtrl: THREE.Bone;
    HipsCtrl: THREE.Bone;
  };
  materials: {
    ["skin.001"]: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type ActionName = "RunAnimation";
interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

export function Zombie(props: JSX.IntrinsicElements["group"]) {
  const { speed, isPaused } = useGameStore();
  const group = useRef<THREE.Group>(null);
  const { nodes, materials, animations, scene } = useGLTF("/models/zombie.glb") as GLTFResult;
  const { actions } = useAnimations(animations, group);

  useLayoutEffect(() =>{
    if(!actions.RunAnimation) return;
    actions.RunAnimation.fadeOut(0.3);
    actions.RunAnimation.fadeIn(0.3);
    actions.RunAnimation.play();
  },[])

  // useEffect(() => {
  //   if(!actions.RunAnimation) return;
    
  //   actions.RunAnimation.timeScale = 1 + (speed * 1.8);
    
  // },[actions, speed]);
  

  
  return (
    <group ref={group} {...props} scale={0.1} onClick={() => console.log('ping')} >
      <group name="Scene">
        <group scale={0.64}>
          <primitive object={scene.clone()} />
          <primitive object={nodes.RightFootCtrl} />
          <primitive object={nodes.HipsCtrl} />
          <skinnedMesh
            name="characterMedium001"
            geometry={nodes.characterMedium001.geometry}
            material={materials["skin.001"]}
            skeleton={nodes.characterMedium001.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/models/zombie.glb");
